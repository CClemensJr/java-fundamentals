/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basicLibrary;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class Library {

/**********
 * ROLLING DICE
 *
 * Write a method called roll that accepts an integer n and rolls a six-sided dice n times. The method should return an
 * array containing the values of the rolls.
 * */
    public int[] roll(int n) {
        int[] rolls = new int[n];
        int min = 1;
        int max = 6;

        for (int i = 0; i < n; i++) {
            rolls[i] = (int) (Math.random() * ((max - min) + 1)) + min;
        }

        return rolls;
    }


/*******
 * CONTAINS DUPLICATES
 *
 * Write a method called containsDuplicates that returns true or false depending on whether the array contains duplicate values.
 * */
    public boolean containsDuplicates(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr.length; j++) {
                if (j == i) return true;
            }
        }

        return false;
    }


/*******
 * Calculating Averages
 *
 * Write a method that accepts an array of integers and calculates and returns the average of all the values in the array.
 * */
    public double calcAvg(int[] arr) {
        double sum = 0;
        double length = arr.length;

        for (int i = 0; i < length; i++) {
            sum += arr[i];
        }

        double avg = sum / length;

        return avg;
    }


/*******
 * Arrays of Arrays
 *
 * Given an array of arrays calculate the average value for each array and return the array with the lowest average.
 * */
    public double[] calcAllAvgs(int[][] arr) {
        int length = arr.length;
        double[] allAvgs = new double[length];

        for (int i = 0; i < length; i++) {
            allAvgs[i] = calcAvg(arr[i]);
        }

        return allAvgs;
    }


/*******
 * Analyzing Weather Data
 *
 * Use the October Seattle weather data above. Iterate through all of the data to find the min and max values.
 * Use a HashSet of type Integer to keep track of all the unique temperatures seen. Finally, iterate from the min temp
 * to the max temp and create a String containing any temperature not seen during the month. Return that String.
 * */
    public String analyzeWeatherData(int[][] temps) {
        Set<Integer> uniqueTemps = new HashSet<>();
        int minTemp = 120;
        int maxTemp = 0;
        String missingTemps = "Never saw temperatures: ";

        // Iterate through array
        for (int i = 0; i < temps.length; i++) {
            for (int j = 0; j < temps[i].length; j++) {
                if (temps[i][j] < minTemp) minTemp = temps[i][j];
                if (temps[i][j] > maxTemp) maxTemp = temps[i][j];

                uniqueTemps.add(temps[i][j]);
            }
        }

        System.out.println("High: " + maxTemp);
        System.out.println("Low: " + minTemp);

        for(int i = minTemp; i < maxTemp; i++) {
            if (!uniqueTemps.contains(i)) missingTemps = missingTemps + i + ", ";
        }

        missingTemps = missingTemps.substring(0, missingTemps.length() - 2);

        System.out.println(missingTemps);

        return missingTemps;
    }


/*******
 * Tallying Election
 *
 * Write a function called tally that accepts a List of Strings representing votes and returns one string to show what got
 * the most votes.
 * */
    public String tally(List<String> results) {

        return "This got most votes:";
    }

}
